Compreendi perfeitamente. A falha na recolha de dados é um problema comum ao lidar com APIs financeiras, pois a disponibilidade dos dados pode variar muito entre empresas e setores.

Como não consigo aceder diretamente ao seu repositório no GitHub para analisar o histórico de erros, modifiquei o seu código para criar uma versão de "diagnóstico". Esta nova versão irá gerar um relatório detalhado sempre que não conseguir encontrar um dado, explicando exatamente o que falhou.

### Análise do Problema

Com base no seu output, identifiquei dois problemas principais:

1.  **Falha Total (`AURE3.SA`):** O código emitiu o aviso "Faltam métricas essenciais". Isto acontece porque a API do Yahoo Finance não retornou um valor para o P/L (`trailingPE`) ou para o P/VP (`priceToBook`). Isto é comum em empresas que tiveram prejuízo recente (P/L fica negativo ou nulo) ou em empresas mais recentes na bolsa com dados ainda incompletos.
2.  **Falha Parcial (`BBDC3.SA`, `PETR4.SA`, `CMIG4.SA`):** Métricas como `Divida_Liquida_EBITDA` e `EV_EBITDA` apareceram como `None`. A razão mais provável é que a API do Yahoo Finance simplesmente **não disponibiliza** estes dados específicos (`debtToEbitda`, `enterpriseToEbitda`) para estas empresas brasileiras, especialmente para o setor financeiro (Bradesco), onde estas métricas de dívida são calculadas de forma diferente.

### Código Atualizado com Relatório de Diagnóstico

Copie e cole este código completo numa única célula do seu Colab. Ao executá-lo para os mesmos ativos, ele irá agora gerar um relatório de diagnóstico claro para cada falha.

```python
# CÉLULA ÚNICA - Copie e cole todo este código em uma única célula do Colab

# ==============================================================================
# 1. INSTALAÇÃO E IMPORTAÇÃO DAS BIBLIOTECAS
# ==============================================================================
!pip install yfinance -q

import yfinance as yf
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML

# ==============================================================================
# 2. FUNÇÃO DE COLETA DE DADOS (COM MODO DE DIAGNÓSTICO)
# ==============================================================================
def get_asset_data_with_diagnostics(ticker):
    """
    Busca dados financeiros e gera um relatório de diagnóstico detalhado
    se alguma métrica chave não for encontrada.
    """
    print(f"Buscando dados para {ticker}...")
    diagnostics = {"ticker": ticker, "status": "OK", "missing_keys": []}
    
    try:
        stock = yf.Ticker(ticker)
        info = stock.info

        # Lista de chaves que o nosso script espera encontrar na API
        expected_keys = [
            'trailingPE', 'priceToBook', 'debtToEbitda', 'enterpriseToEbitda',
            'dividendYield', 'returnOnEquity', 'profitMargins', 'earningsQuarterlyGrowth'
        ]

        # Verifica cada chave e regista as que estão em falta
        for key in expected_keys:
            if key not in info or info[key] is None:
                diagnostics["missing_keys"].append(key)
        
        # Se as métricas mais importantes faltarem, o status muda para falha.
        if 'trailingPE' not in info or info.get('trailingPE') is None or \
           'priceToBook' not in info or info.get('priceToBook') is None:
            diagnostics["status"] = "FALHA_CRITICA"
            generate_diagnostic_report(diagnostics, info)
            return None, diagnostics

        data = {
            "ticker": ticker,
            "P/L": info.get('trailingPE'),
            "P/VP": info.get('priceToBook'),
            "Divida_Liquida_EBITDA": info.get('debtToEbitda'),
            "EV_EBITDA": info.get('enterpriseToEbitda'),
            "Dividend_Yield": (info.get('dividendYield') or 0) * 100,
            "ROE": (info.get('returnOnEquity') or 0) * 100,
            "Margem_Liquida": (info.get('profitMargins') or 0) * 100,
            "Crescimento_LPA_5A": (info.get('earningsQuarterlyGrowth') or 0) * 100
        }
        
        try:
            financials = stock.financials
            if 'Net Income' in financials.index:
                net_income_last_4_years = financials.loc['Net Income'].dropna()
                data["Consistencia_Lucro_5A"] = all(net_income_last_4_years > 0)
            else: data["Consistencia_Lucro_5A"] = False
        except Exception: data["Consistencia_Lucro_5A"] = False
        
        if diagnostics["missing_keys"]:
            diagnostics["status"] = "AVISO_DADOS_PARCIAIS"
            generate_diagnostic_report(diagnostics) # Gera relatório mesmo para falhas parciais

        return data, diagnostics

    except Exception as e:
        diagnostics["status"] = f"ERRO_API: {e}"
        generate_diagnostic_report(diagnostics)
        return None, diagnostics

# ==============================================================================
# 3. FUNÇÃO DE GERAÇÃO DE RELATÓRIO DE DIAGNÓSTICO
# ==============================================================================
def generate_diagnostic_report(diagnostics, api_data=None):
    """Gera um relatório HTML para os dados em falta."""
    missing_keys_str = ", ".join(diagnostics['missing_keys']) if diagnostics['missing_keys'] else "Nenhuma"
    
    html = f"""
    <div style="font-family: Arial, sans-serif; border: 1px solid #FFBABA; background-color: #FFD2D2; border-radius: 10px; padding: 15px; margin: 15px; max-width: 700px;">
      <h3 style="color: #D8000C;">Relatório de Diagnóstico para: {diagnostics['ticker']}</h3>
      <p><strong>Status:</strong> <span style="font-weight: bold; color: #D8000C;">{diagnostics['status']}</span></p>
      <p><strong>Causa Provável:</strong></p>
      <ul>
    """
    if diagnostics['status'] == 'FALHA_CRITICA':
        html += "<li>A API não retornou o P/L ('trailingPE') ou P/VP ('priceToBook'). Isto pode ocorrer se a empresa deu prejuízo ou se os dados são incompletos na plataforma Yahoo Finance.</li>"
    else:
        html += "<li>A API do Yahoo Finance não forneceu os seguintes campos para este ativo. Isto é comum e geralmente não é um erro no código, mas sim uma limitação da fonte de dados.</li>"
    
    html += f"""
      </ul>
      <p><strong>Métricas em Falta:</strong> {missing_keys_str}</p>
    </div>
    """
    display(HTML(html))


# ==============================================================================
# 4. CÓDIGO DE ANÁLISE E GERAÇÃO DO RELATÓRIO VISUAL (sem alterações)
# ==============================================================================
def analyze_asset(data):
    scores = {}
    score_valor = 0
    if data["P/L"] is not None and data["P/L"] < 10: score_valor += 3
    elif data["P/L"] is not None and data["P/L"] <= 15: score_valor += 2
    if data["P/VP"] is not None and data["P/VP"] < 1.0: score_valor += 3
    elif data["P/VP"] is not None and data["P/VP"] <= 1.5: score_valor += 2
    if data["Divida_Liquida_EBITDA"] is not None and data["Divida_Liquida_EBITDA"] < 1.5: score_valor += 3
    elif data["Divida_Liquida_EBITDA"] is not None and data["Divida_Liquida_EBITDA"] <= 3.0: score_valor += 2
    if data["EV_EBITDA"] is not None and data["EV_EBITDA"] < 8: score_valor += 3
    elif data["EV_EBITDA"] is not None and data["EV_EBITDA"] <= 12: score_valor += 2
    scores['valor'] = round(score_valor / 4, 2)
    score_qualidade = 0
    if data["Dividend_Yield"] > 6: score_qualidade += 3
    elif data["Dividend_Yield"] >= 4: score_qualidade += 2
    if data["ROE"] > 20: score_qualidade += 3
    elif data["ROE"] >= 15: score_qualidade += 2
    if data["Consistencia_Lucro_5A"]: score_qualidade += 3
    if data["Margem_Liquida"] > 15: score_qualidade += 3
    elif data["Margem_Liquida"] >= 8: score_qualidade += 2
    scores['qualidade_renda'] = round(score_qualidade / 4, 2)
    score_crescimento = 0
    if data["Crescimento_LPA_5A"] > 20: score_crescimento += 3
    elif data["Crescimento_LPA_5A"] >= 10: score_crescimento += 2
    if data["P/L"] is not None and data["Crescimento_LPA_5A"] > 0:
        peg_ratio = data["P/L"] / data["Crescimento_LPA_5A"]
        if peg_ratio < 1.0: score_crescimento += 3
        elif peg_ratio <= 1.5: score_crescimento += 2
    scores['crescimento'] = round(score_crescimento / 2, 2)
    return scores

def generate_visual_report(ticker, data, scores):
    pesos = {
        "Conservador": {"valor": 0.4, "qualidade_renda": 0.5, "crescimento": 0.1},
        "Moderado":    {"valor": 0.3, "qualidade_renda": 0.4, "crescimento": 0.3},
        "Agressivo":   {"valor": 0.15, "qualidade_renda": 0.35, "crescimento": 0.5}
    }
    final_scores = {}
    for perfil, peso in pesos.items():
        score_final = (scores['valor'] * peso['valor'] +
                       scores['qualidade_renda'] * peso['qualidade_renda'] +
                       scores['crescimento'] * peso['crescimento'])
        final_scores[perfil] = score_final
    def get_bar_color(score):
        if score >= 2.0: return '#4CAF50'
        if score >= 1.0: return '#FFC107'
        return '#F44336'
    def create_bar(score):
        width = (score / 3) * 100
        color = get_bar_color(score)
        return f"""<div style="width: 100%; background-color: #ddd; border-radius: 5px;"><div style="width: {width}%; background-color: {color}; height: 20px; text-align: center; color: white; line-height: 20px; border-radius: 5px; font-weight: bold;">{score:.2f}</div></div>"""
    data_html_rows = ""
    for key, value in data.items():
        formatted_value = f"{value:.2f}" if isinstance(value, (int, float)) else str(value)
        data_html_rows += f"<tr><td>{key.replace('_', ' ')}</td><td>{formatted_value}</td></tr>"
    html_report = f"""<div style="font-family: Arial, sans-serif; border: 1px solid #e0e0e0; border-radius: 10px; padding: 20px; margin: 15px; max-width: 700px; box-shadow: 0 4px 8px 0 rgba(0,0,0,0.1);"><h1 style="text-align: center; color: #333; border-bottom: 2px solid #4CAF50; padding-bottom: 10px;">Análise Quantitativa: {ticker.upper()}</h1><h2 style="color: #444;">Scores por Pilar (0-3)</h2><table style="width: 100%; border-collapse: collapse;"><tr><td style="width: 30%; padding: 8px 0;">Valor (Graham)</td><td>{create_bar(scores['valor'])}</td></tr><tr><td style="padding: 8px 0;">Qualidade & Renda (Buffett)</td><td>{create_bar(scores['qualidade_renda'])}</td></tr><tr><td style="padding: 8px 0;">Crescimento (Lynch)</td><td>{create_bar(scores['crescimento'])}</td></tr></table><h2 style="color: #444; margin-top: 25px;">Pontuação Final por Perfil (0-3)</h2><table style="width: 100%; border-collapse: collapse;"><tr><td style="width: 30%; padding: 8px 0;">Conservador</td><td>{create_bar(final_scores['Conservador'])}</td></tr><tr><td style="padding: 8px 0;">Moderado</td><td>{create_bar(final_scores['Moderado'])}</td></tr><tr><td style="padding: 8px 0;">Agressivo</td><td>{create_bar(final_scores['Agressivo'])}</td></tr></table><h2 style="color: #444; margin-top: 25px;">Dados Coletados da API</h2><table style="width: 100%; border-collapse: collapse; font-size: 14px;"><thead style="background-color: #f2f2f2;"><tr><th style="padding: 8px; text-align: left;">Métrica</th><th style="padding: 8px; text-align: left;">Valor</th></tr></thead><tbody>{data_html_rows}</tbody></table></div>"""
    display(HTML(html_report))

# ==============================================================================
# 5. CRIAÇÃO DA INTERFACE E LÓGICA DE EXECUÇÃO
# ==============================================================================
text_input = widgets.Text(
    value='BBDC3.SA, AURE3.SA, PETR4.SA, CMIG4.SA',
    placeholder='Digite os tickers separados por vírgula',
    description='Ativos:',
    disabled=False,
    layout=widgets.Layout(width='500px')
)
run_button = widgets.Button(description='Analisar Ativos', button_style='success', tooltip='Clique para iniciar a análise', icon='search')
output_area = widgets.Output()

def on_button_clicked(b):
    with output_area:
        clear_output(wait=True)
        tickers_input = text_input.value
        if not tickers_input:
            display(HTML("<p style='color: red;'>Por favor, insira pelo menos um ticker para analisar.</p>"))
            return

        tickers_list = [ticker.strip().upper() for ticker in tickers_input.split(',')]
        for ticker in tickers_list:
            if not ticker: continue
            asset_data, diagnostics = get_asset_data_with_diagnostics(ticker)
            if asset_data:
                asset_scores = analyze_asset(asset_data)
                generate_visual_report(ticker, asset_data, asset_scores)

run_button.on_click(on_button_clicked)

display(HTML("<h2>Ferramenta de Análise e Diagnóstico de Ações</h2>"))
display(HTML("<p>Instruções: Digite os tickers (separados por vírgula) e clique no botão. Use o sufixo <b>.SA</b> para ações brasileiras.</p>"))
display(text_input, run_button, output_area)

```
